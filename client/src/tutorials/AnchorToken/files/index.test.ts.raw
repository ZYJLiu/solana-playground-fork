// No imports needed: web3, anchor, pg and more are globally available
import { Metaplex } from "@metaplex-foundation/js";
import { getMint, getAssociatedTokenAddressSync } from "@solana/spl-token";

describe("Test", () => {
  const TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(
    "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
  );

  const metaplex = Metaplex.make(pg.connection);

  const metadata = {
    uri: "https://raw.githubusercontent.com/solana-developers/program-examples/new-examples/tokens/tokens/.assets/spl-token.json",
    name: "Solana Gold",
    symbol: "GOLDSOL",
  };

  const [rewardTokenMintPda] = anchor.web3.PublicKey.findProgramAddressSync(
    [Buffer.from("reward")],
    pg.PROGRAM_ID
  );

  const [vaultTokenAccountPda] = anchor.web3.PublicKey.findProgramAddressSync(
    [Buffer.from("vault"), rewardTokenMintPda.toBuffer()],
    pg.PROGRAM_ID
  );

  const playerTokenAccount = getAssociatedTokenAddressSync(
    rewardTokenMintPda,
    pg.wallet.publicKey
  );

  it("Initialize New Token Mint", async () => {
    try {
      const mintData = await getMint(pg.connection, rewardTokenMintPda);
      console.log("Mint Already Exists");
    } catch {
      const rewardTokenMintMetadataPDA = await metaplex
        .nfts()
        .pdas()
        .metadata({ mint: rewardTokenMintPda });
      // Add your test here.
      const txHash = await pg.program.methods
        .createMint(metadata.uri, metadata.name, metadata.symbol)
        .accounts({
          rewardTokenMint: rewardTokenMintPda,
          metadataAccount: rewardTokenMintMetadataPDA,
          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,
        })
        .rpc();
      console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);
    }
    console.log("Token Mint: ", rewardTokenMintPda.toString());
  });

  it("Mint Tokens", async () => {
    const txHash = await pg.program.methods
      .mintTokens(new anchor.BN(1_000_000_000))
      .accounts({
        playerTokenAccount: playerTokenAccount,
        rewardTokenMint: rewardTokenMintPda,
      })
      .rpc();
    console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);
  });

  it("Deposit Tokens", async () => {
    const txHash = await pg.program.methods
      .depositTokens(new anchor.BN(1_000_000_000))
      .accounts({
        playerTokenAccount: playerTokenAccount,
        vaultTokenAccount: vaultTokenAccountPda,
        rewardTokenMint: rewardTokenMintPda,
      })
      .rpc();
    console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);
  });

  it("Withdraw Tokens", async () => {
    const txHash = await pg.program.methods
      .withdrawTokens(new anchor.BN(1_000_000_000))
      .accounts({
        playerTokenAccount: playerTokenAccount,
        vaultTokenAccount: vaultTokenAccountPda,
        rewardTokenMint: rewardTokenMintPda,
      })
      .rpc();
    console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);
  });
});
